zest.recipe.mk_buildout
=======================

This recipe create a sub-buildout inside your buildout. The goal is to
ease testing of a products over various versions of a framework, or
various python versions etc.
This recipe should be used with ``zest.recipe.multi_buildout_test``
that will create a test runner that runs test for all sub-buildouts.

All eggs developed locally in the main buildout (with ``mr.developer``
or the ``develop`` part of the buildout) are automatically added to
the sub-buildouts, so you can work with only one source for the
tested egg (it avoids having to push changes from one buildout, pull
them from the other, run the test again etc...).

It was originatelly created to test ``collective.sendaspdf`` with
 Plone 3 and 4.

Available options
-----------------

When writing a buildout part using ``zest.recipe.mk_buildout``, you
have several options available::

- python (default:  'python'): the python executable that will be used
  inside the sub-buildout. If you use aliases to manage your various
  python versions, you can not use them here. Use the full path to the
  executable instead.

- paster (default: 'paster'): the paster executable used to generate
  the sub-buildout.

- template (default: 'plone'): the template used by paster to create
  the sub-buildout.

- paster_commands: if the paster recipe you use is interactive, you
  can specify here the list of inputs to give when creating the
  sub-buildout. Have a look below at the sample to create a Plone
  instance that shows some specificities and caveats.

- buildout_file (default: 'buildout.cfg'): the name of the main
  buildout file generated by the paster command. If you use a custom
  recipe that creates multiple buildout files (for example with Zest
  templates, we get 'devel.cfg', 'preview.cfg' and 'production.cfg')
  you can specify the one you want to extend here.

- buildout_rename (default: 'buildout_base.cfg'): if the main buildout
  file created is 'buildout.cfg', we need to rename it in order to
  create a customized file. The original buildout.cfg file will be
  renamed into 'buildout_base.cfg' and the newly created one will
  extend it.

- extra_parts: in the main buildout, you can define a list of parts
  that will be copied into the sub-buildout using this option.

- extra_options: a list of options that can be added to the
  sub-buildouts. Have a look at the samples section for detailled
  explanations.

- extra_eggs: a list of eggs that will be added to the
  sub-buildout. Might be handy if you need them for running the tests
  for example.

- test_runner (default: 'bin/test'): the command used to run the tests
  in the sub-buildout.


Samples
-------

This first sample will show how to create a Plone 3 sub-buildout with
a package developed locally using the 'develop' option.

Here's the main buildout file::

  [buildout]
  
  parts =
      plone3

  develop =
      src/collective.setdefaulteditor

  [plone3]
  recipe = zest.recipe.mk_buildout
  python = /Volumes/Data/buildouts/python/python-2.4/bin/python
  paster = /Volumes/Data/buildouts/tools/bin/paster
  template = plone3_buildout
  paster_commands = easy
      3.3.6
      ''
      ''
      ''
      admin
      ''
      ''
      ''
      ''

In the options, I've specified a custom path to use Python 2.4 (as
Plone 3 does not support higher Python versions). I also specified a
custom paster command as this one allows more templates.

As the template I used is interactive, I've added the list of things
to type in for each questions. In most cases I let the default answer
(''), I've just specified the mode used (easy), the Plone version
(3.3.6) and the admin password ('admin').
Two things can be seen in this options definition ::

 - I did not start the commands on a new line (as I did for the
   develop part for example). This is due to the fact that if I start
   on a new line, an empty entry will be added first.

 - empty lines are automatically deleted by buildout. So '' is
   equivalent to "press enter" on the question.


After running this buildout, a new folder appeared in the ``parts``
folder. This is our sub-buildout created by the recipe. If we have a
look at it, we can see that the original ``buildout.cfg`` file has
been renamed ``buildout_base.cfg`` and a new ``buildout.cfg`` file has
been created.

Here's the content of this new buildout file::

  [buildout]
  extends = buildout_base.cfg
  eggs+=
     collective.setdefaulteditor

  develop+=
     /Volumes/Data/buildouts/tests/multi_instance_plone3_test/src/collective.setdefaulteditor

As we can see, the egg developed in the main buildout is also
available in the sub-buildout and uses the same sources directory.

Let's take another example, a bit more complete. This is the buildout
file I used when developping this recipe, in order to test
``collective.sendaspdf``::

  [buildout]
  parts =
        plone_3.3.5
        plone_4
        test_all

  extensions =
      mr.developer
  sources = sources

  [sources]
  collective.sendaspdf = git git@github.com:vincent-psarga/collective.sendaspdf.git

  [base]
  buildout_file = devel.cfg

  extra_eggs =
      pdfminer

  extra_parts =
      wkhtmltopdf
      wkhtmltopdf_executable

  extra_options =
      allow-picked-versions = true
      [instance]environment-vars += WKHTMLTOPDF_PATH ${wkhtmltopdf:location}/wkhtmltopdf

  [plone_3.3.5]
  <= base
  recipe = zest.recipe.mk_buildout
  python = /Volumes/Data/buildouts/python/python-2.4/bin/python
  template = zest_buildout

  [plone_4]
  <= base
  recipe = zest.recipe.mk_buildout
  python = /Volumes/Data/buildouts/python/python-2.6/bin/python
  template = zest_buildout_plone4
  buildout_file = devel.cfg

  extra_options +=
      [environment]WKHTMLTOPDF_PATH=${wkhtmltopdf:location}/wkhtmltopdf
      [test]environment = environment

  [test_all]
  recipe = zest.recipe.multi_buildout_test
  		
  [wkhtmltopdf]
  recipe = hexagonit.recipe.download
  ignore-existing = true
  url = http://wkhtmltopdf.googlecode.com/files/wkhtmltopdf-0.9.9-OS-X.i368
  download-only = true

  [wkhtmltopdf_executable]
  recipe = collective.recipe.cmd
  on_install = true
  on_update = true
  cmds =
       cd ${buildout:directory}/parts/wkhtmltopdf
       mv wkhtmltopdf-0.9.9-OS-X.i368 wkhtmltopdf
       chmod +x wkhtmltopdf

Here, the egg to test is developed using ``mr.developer``. It will be
tested with two versions of Plone: 3.3.5 and 4.

As there's many common options for both parts, I first defined a
[base] part in the buildout.
Let's have a look at the options set there::

 - buildout_file: I use custom zest recipes to create the buildout
   that do not create a ``buildout.cfg`` file, I have to specify which
   bildout file to extend.

 - extra_eggs: ``pdfminer`` is an egg that is needed to run the
   ``sendaspdf`` tests. I did not want to develop it (I just use it),
   so I declared it an an extra egg that will be included in the
   sub-buildouts.

 - extra_parts: so extra parts need to be created in the sub-buildouts
   in order to fetch ``wkhtmltopdf``, an executable that transforms
   HTML to PDF. The corresponding parts will be copied from the main
   buildout to the sub-buildouts.

 - extra_options: I've declared two options. The first line will tell
   that "allow-picked-versions = true" should be added to the
   ``[buildout]`` part of the sub-buildouts. The second one tells that 
   ``environment-vars += WKHTMLTOPDF_PATH
   ${wkhtmltopdf:location}/wkhtmltopdf`` should be added to the
   ``[instance]`` part of the sub-buildouts.

The ``[plone_3.3.5]`` part is pretty trivial, it just defines the
python version to use and the template for paster.
The ``[plone_4]`` part defines some new extra options::

 - ``WKHTMLTOPDF_PATH=${wkhtmltopdf:location}/wkhtmltopdf`` in the
   ``[environment]`` part.

 - ``environment = environment`` in the ``[test]`` part.

Now let's have a look at the buildout files generated by this
buildout.
First the one in ``parts/plone_3.3.5``::

  [buildout]
  extends = devel.cfg
  eggs+=
     collective.sendaspdf
     pdfminer

  develop+=
     /Volumes/Data/buildouts/tests/multi_instances/src/collective.sendaspdf

  allow-picked-versions = true

  parts+=
    wkhtmltopdf
    wkhtmltopdf_executable

  [wkhtmltopdf]
  url = http://wkhtmltopdf.googlecode.com/files/wkhtmltopdf-0.9.9-OS-X.i368
  ignore-existing = true
  recipe = hexagonit.recipe.download
  download-only = true
  strip-top-level-dir = false
  hash-name = true
  destination = /Volumes/Data/buildouts/tests/multi_instances/parts/plone_3.3.5/parts/wkhtmltopdf
  location = /Volumes/Data/buildouts/tests/multi_instances/parts/plone_3.3.5/parts/wkhtmltopdf


  [wkhtmltopdf_executable]
  on_update = true
  on_install = true
  recipe = collective.recipe.cmd
  cmds=
    cd /Volumes/Data/buildouts/tests/multi_instances/parts/plone_3.3.5/parts/wkhtmltopdf
    mv wkhtmltopdf-0.9.9-OS-X.i368 wkhtmltopdf
    chmod +x wkhtmltopdf

  [instance]
  environment-vars += WKHTMLTOPDF_PATH /Volumes/Data/buildouts/tests/multi_instances/parts/plone_3.3.5/parts/wkhtmltopdf/wkhtmltopdf


As we can see, the parts ``wkhtmltopdf`` and
``wkhtmltopdf_executable`` have been copied from the main buildout to
the new one.
The extra options have been added to the ``buildout`` and ``instance``
parts.

The Plone 4 sub-buildout looks the same more or less, with two new
parts added::

  [environment]
  WKHTMLTOPDF_PATH=/Volumes/Data/buildouts/tests/multi_instances/parts/plone_4/parts/wkhtmltopdf/wkhtmltopdf

  [test]
  environment = environment

Another thing to see in the main buildout is this part::

  [test_all]
  recipe = zest.recipe.multi_buildout_test

It created a new bin file called 'test_all'. This file will execute
the test runners for the Plone 3.3.5 and Plone 4 instance.
For example::

  [vincent ~/buildouts/tests/multi_instances]> bin/test_all -m sendaspdf -t utils.py
  ********************************************************************************
  Running tests for buildout plone_4
  ********************************************************************************
  bin/test:249: DeprecationWarning: zope.testing.testrunner is deprecated in favour of zope.testrunner.
  /Volumes/Data/buildouts/tests/multi_instances/parts/plone_4/eggs/zope.testing-3.9.6-py2.6.egg/zope/testing/testrunner/formatter.py:28: DeprecationWarning: zope.testing.exceptions is deprecated in favour of zope.testrunner.exceptions
    from zope.testing.exceptions import DocTestFailureException
  Running zope.testing.testrunner.layer.UnitTests tests:
    Set up zope.testing.testrunner.layer.UnitTests in 0.000 seconds.
    Running:
                
    Ran 1 tests with 0 failures and 0 errors in 0.464 seconds.
  Tearing down left over layers:
    Tear down zope.testing.testrunner.layer.UnitTests in 0.000 seconds.
  ********************************************************************************
  Running tests for buildout plone_3.3.5
  ********************************************************************************
  Running tests at level 1
  Running zope.testing.testrunner.layer.UnitTests tests:
    Set up zope.testing.testrunner.layer.UnitTests in 0.000 seconds.
    Running:
  .
    Ran 1 tests with 0 failures and 0 errors in 0.016 seconds.
  Tearing down left over layers:
    Tear down zope.testing.testrunner.layer.UnitTests in 0.000 seconds.

As you can see, the test runner accepts the same arguments than the
test runners of the sub-buildouts (in fact it will just repeat the
given arguments to the runner in the sub-buildouts).


TL;DR
-----

Yo dawg, I heard you liked buildout so I created a buildout recipe
that creates buildout inside your buildout.
